#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W         &kp E         &kp R                          &kp T                                   &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A           &kp S         &kp D         &kp F                          &kp G     &kp EQUAL      &mo 3          &kp H      &kp J  &kp K      &kp L    &lt 5 ENTER
&kp Z           &kp X         &kp C         &kp V                          &kp B     &kp GRAVE      &kp BACKSPACE  &kp N      &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LEFT_SHIFT  &kp LEFT_ALT  &kp LEFT_WIN  &lt_to_layer_0 5 LEFT_CONTROL  &mkp MB1  &mkp MB2       &mo 2          &kp SPACE                             &lt 1 MINUS
            >;
        };

        FUNCTION {
            bindings = <
&kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)                                &kp LS(NUMBER_6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)
&trans            &trans            &trans            &trans            &trans       &trans           &trans      &trans            &trans      &trans      &trans      &trans
&trans            &trans            &trans            &trans            &trans       &trans           &bt BT_CLR  &trans            &trans      &trans      &trans      &trans
&trans            &trans            &trans            &key_repeat       &key_repeat  &key_repeat      &trans      &trans                                                &bt BT_SEL 0
            >;
        };

        NUM {
            bindings = <
&kp NUMBER_1                &kp NUMBER_2     &kp NUMBER_3     &kp NUMBER_4      &kp N5                                                          &kp NUMBER_6  &kp N7        &kp N8         &kp N9  &kp N0
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6   &kp ASTERISK       &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &trans        &kp LC(LEFT)  &kp LC(RIGHT)  &trans  &kp SEMICOLON
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3   &kp PERIOD         &kp EQUAL                    &trans          &trans        &trans        &trans         &trans  &trans
&trans                      &trans           &trans           &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans                       &trans          &trans                                             &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                                  &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END       &trans            &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans        &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &bt BT_SEL 0             &bt BT_SEL 1  &bt BT_SEL 2      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans       &trans       &trans       &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &key_repeat  &key_repeat  &key_repeat  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1     &mkp MB3     &mkp MB2     &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                         &trans
            >;
        };

        SCROLL {
            bindings = <
&kp TAB    &kp ESCAPE  &kp LC(E)   &trans     &kp LG(T)                              &trans          &trans              &trans         &kp LC(LS(UP_ARROW))    &kp UP_ARROW
&kp LC(A)  &trans      &kp DELETE  &kp RIGHT  &trans     &trans      &trans          &kp BACKSPACE   &kp LC(J)           &kp LC(K)      &kp LC(L)               &kp LC(SEMICOLON)
&kp LG(Z)  &kp LG(X)   &kp LG(C)   &kp LG(V)  &kp LEFT   &trans      &trans          &kp DOWN        &kp LG(LEFT_ARROW)  &kp LG(RIGHT)  &kp LC(LS(DOWN_ARROW))  &trans
&trans     &trans      &trans      &trans     &trans     &trans      &kp LANGUAGE_1  &kp LANGUAGE_2                                                             &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
